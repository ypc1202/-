C51 COMPILER V9.54   SPI                                                                   10/15/2016 23:15:47 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN .\Objects\Spi.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Common\Spi.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Include) DEFINE
                    -(FOSC_221184) DEBUG OBJECTEXTEND PRINT(.\Listings\Spi.lst) TABS(2) OBJECT(.\Objects\Spi.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2015 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Nuvoton Technoledge Corp.
   9          //  Website: http://www.nuvoton.com
  10          //  E-Mail : MicroC-8bit@nuvoton.com
  11          //  Date   : Apr/21/2015
  12          //********************************************************************************************************
             -***
  13          
  14          //********************************************************************************************************
             -***
  15          //  File Function: N76E885 Access SPI Flash (W25Q16BV) demo code
  16          //********************************************************************************************************
             -***
  17          
  18          #include <stdio.h>
  19          #include <intrins.h>
  20          #include <string.h>
  21          #include "Common.h"
  22          
  23          /*
  24          //-------- <<< Use Configuration Wizard in Context Menu >>> ------------
  25          //
  26          //<e0> System Clock Source Configuration
  27          // <o1> System Clock Source Selection
  28          //      <0=> 2~25MHz    XTAL
  29          //      <1=> 32.768KHz  XTAL
  30          //      <2=> 22.1184MHz Internal
  31          //      <3=> 10KHz      Internal
  32          //      <4=> OSC-In     External
  33          //</e>
  34          //
  35          //<e2> Clock Divider Configuration
  36          //     <o3.0..7>  System Clock Source Devider <1-255>
  37          //                     <i> Fsys = (System Clock Source) / (2 * Devider)
  38          //</e>
  39          //
  40          // <o4> SPI Clock Rate Selection (11.0592MHz System Clock)
  41          //                  <0=>  2.7648MHz, Fosc/4
  42          //                  <1=>  1.3824MHz, Fosc/8
  43          //                  <2=>  0.6912MHz, Fosc/16
  44          //                  <3=>  0.3456MHz, Fosc/32
  45          //-------- <<< end of configuration section >>> ------------------------------
C51 COMPILER V9.54   SPI                                                                   10/15/2016 23:15:47 PAGE 2   

  46          */
  47          
  48          //--------------------------------------------------------------------------------------------------------
             ----
  49          void SPI_Error(void)
  50          {
  51   1          printf ("\n*  SPI Error, please check the connection between MCU and SPI Flash");
  52   1      }
  53          //--------------------------------------------------------------------------------------------------------
             ----
  54          void SPI_Initial(UINT8 SpiClk)
  55          {
  56   1          if(SpiClk == 0)
  57   1          {
  58   2              clr_SPR1;
  59   2              clr_SPR0;
  60   2          }
  61   1          else if(SpiClk == 1)
  62   1          {
  63   2              clr_SPR1;
  64   2              set_SPR0;
  65   2          }
  66   1          else if(SpiClk == 2)
  67   1          {
  68   2              set_SPR1;
  69   2              clr_SPR0;
  70   2          }
  71   1          else
  72   1          {
  73   2              set_SPR1;
  74   2              set_SPR0;
  75   2          }
  76   1      
  77   1          /* /SS General purpose I/O ( No Mode Fault ) */
  78   1          set_DISMODF;
  79   1          clr_SSOE;
  80   1      
  81   1          /* SPI in Master mode */
  82   1          set_MSTR;
  83   1      
  84   1          /* MSB first */
  85   1          clr_LSBFE;
  86   1      
  87   1          clr_CPOL;
  88   1          clr_CPHA;
  89   1      
  90   1          /* Enable SPI function */
  91   1          set_SPIEN;
  92   1      }
  93          
  94          //--------------------------------------------------------------------------------------------------------
             ----
  95          void Read_MID_DID(UINT8 *pu8MID, UINT8 *pu8DID)
  96          {
  97   1          SS_PIN = 0;
  98   1          SPDR = 0x90;
  99   1          while((SPSR&0x80)==0x00);
 100   1          clr_SPIF;
 101   1      
 102   1          SPDR = 0x00;
 103   1          while((SPSR&0x80)==0x00);
 104   1          clr_SPIF;
C51 COMPILER V9.54   SPI                                                                   10/15/2016 23:15:47 PAGE 3   

 105   1      
 106   1          SPDR = 0x00;
 107   1          while((SPSR&0x80)==0x00);
 108   1          clr_SPIF;
 109   1      
 110   1          SPDR = 0x00;
 111   1          while((SPSR&0x80)==0x00);
 112   1          clr_SPIF;
 113   1      
 114   1          SPDR = 0xFF;
 115   1          while((SPSR&0x80)==0x00);
 116   1          *pu8MID = SPDR;
 117   1          clr_SPIF;
 118   1      
 119   1          SPDR = 0xFF;
 120   1          while((SPSR&0x80)==0x00);
 121   1          *pu8DID = SPDR;
 122   1          clr_SPIF;
 123   1          SS_PIN = 1;
 124   1      }
 125          
 126          //--------------------------------------------------------------------------------------------------------
             ----
 127          void Flash_Write_Enable(void)
 128          {
 129   1          SS_PIN = 0;
 130   1          SPDR = WRITE_ENABLE;
 131   1          while((SPSR&0x80)==0x00);
 132   1          clr_SPIF;
 133   1          SS_PIN = 1;
 134   1      }
 135          
 136          //--------------------------------------------------------------------------------------------------------
             ----
 137          void Flash_Write_Disable(void)
 138          {
 139   1          SS_PIN = 0;
 140   1          SPDR = WRITE_DISABLE;
 141   1          while((SPSR&0x80)==0x00);
 142   1          clr_SPIF;
 143   1          SS_PIN = 1;
 144   1      }
 145          
 146          //--------------------------------------------------------------------------------------------------------
             ----
 147          void Flash_Chip_Erase(void)
 148          {
 149   1          SS_PIN = 0;
 150   1          SPDR = CHIP_ERASE;
 151   1          while((SPSR&0x80)==0x00);
 152   1          clr_SPIF;
 153   1          SS_PIN = 1;
 154   1      }
 155          
 156          //--------------------------------------------------------------------------------------------------------
             ----
 157          void Flash_Read_Status(void)
 158          {
 159   1          UINT8 u8Status;
 160   1      
 161   1          SS_PIN = 0;
 162   1          do
C51 COMPILER V9.54   SPI                                                                   10/15/2016 23:15:47 PAGE 4   

 163   1          {
 164   2              SPDR = READ_STATUS1;
 165   2              while((SPSR&0x80)==0x00);
 166   2              clr_SPIF;
 167   2      
 168   2              SPDR = 0xFF;
 169   2              while((SPSR&0x80)==0x00);
 170   2              u8Status = SPDR;
 171   2              clr_SPIF;
 172   2          }
 173   1          while((u8Status&0x01)==0x01);
 174   1          SS_PIN = 1;
 175   1      }
 176          
 177          //--------------------------------------------------------------------------------------------------------
             ----
 178          void Flash_Erase_Verify(void)
 179          {
 180   1          UINT16 u16CNT;
 181   1          UINT8  u8Data;
 182   1      
 183   1          SS_PIN = 0;
 184   1      
 185   1          SPDR = READ_DATA;
 186   1          while((SPSR&0x80)==0x00);
 187   1          clr_SPIF;
 188   1      
 189   1          /* 24-bit Address */
 190   1          SPDR = 0x00;
 191   1          while((SPSR&0x80)==0x00);
 192   1          clr_SPIF;
 193   1      
 194   1          SPDR = 0x00;
 195   1          while((SPSR&0x80)==0x00);
 196   1          clr_SPIF;
 197   1      
 198   1          SPDR = 0x00;
 199   1          while((SPSR&0x80)==0x00);
 200   1          clr_SPIF;
 201   1      
 202   1          for(u16CNT = 0; u16CNT < CHIP_SIZE; u16CNT++)
 203   1          {
 204   2              SPDR = 0x00;
 205   2              while((SPSR&0x80)==0x00);
 206   2              u8Data = SPDR;
 207   2              clr_SPIF;
 208   2              if(u8Data != 0xFF)
 209   2              {
 210   3                  SPI_Error();
 211   3              }
 212   2          }
 213   1      
 214   1          SS_PIN = 1;
 215   1      }
 216          
 217          //--------------------------------------------------------------------------------------------------------
             ----
 218          void Flash_Program(UINT16 *pu16DAT)
 219          {
 220   1          SS_PIN = 0;
 221   1      
 222   1          SPDR = PAGE_PROGRAM;
C51 COMPILER V9.54   SPI                                                                   10/15/2016 23:15:47 PAGE 5   

 223   1          while((SPSR&0x80)==0x00);
 224   1          clr_SPIF;
 225   1      
 226   1          /* 24-bit Address */
 227   1          SPDR = 0x00;
 228   1          while((SPSR&0x80)==0x00);
 229   1          clr_SPIF;
 230   1      
 231   1          SPDR = 0x00;
 232   1          while((SPSR&0x80)==0x00);
 233   1          clr_SPIF;
 234   1      
 235   1          SPDR = 0x00;
 236   1          while((SPSR&0x80)==0x00);
 237   1          clr_SPIF;
 238   1      
 239   1          /* Send the data to SPI_Flash buffer */
 240   1          SPDR = (UINT8)(&pu16DAT);
 241   1          while((SPSR&0x80)==0x00);
 242   1          clr_SPIF;
 243   1      
 244   1          SS_PIN = 1;
 245   1      }
 246          //--------------------------------------------------------------------------------------------------------
             ----
 247          void Flash_Program_Verify(UINT16 *pu16DAT)
 248          {
 249   1          UINT8  u8Data;
 250   1      
 251   1          SS_PIN = 0;
 252   1      
 253   1          SPDR = READ_DATA;
 254   1          while((SPSR&0x80)==0x00);
 255   1          clr_SPIF;
 256   1      
 257   1          /* 24-bit Address */
 258   1          SPDR = 0x00;
 259   1          while((SPSR&0x80)==0x00);
 260   1          clr_SPIF;
 261   1      
 262   1          SPDR = 0x00;
 263   1          while((SPSR&0x80)==0x00);
 264   1          clr_SPIF;
 265   1      
 266   1          SPDR = 0x00;
 267   1          while((SPSR&0x80)==0x00);
 268   1          clr_SPIF;
 269   1      
 270   1          SPDR = 0x00;
 271   1          while((SPSR&0x80)==0x00);
 272   1          u8Data = SPDR;
 273   1          clr_SPIF;
 274   1          if(u8Data != (UINT8)(&pu16DAT))
 275   1          {
 276   2              SPI_Error();
 277   2          }
 278   1      
 279   1          SS_PIN = 1;
 280   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.54   SPI                                                                   10/15/2016 23:15:47 PAGE 6   

   CODE SIZE        =    465    ----
   CONSTANT SIZE    =     69    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
