C51 COMPILER V9.54   PWM                                                                   10/15/2016 23:15:47 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN .\Objects\Pwm.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Common\Pwm.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Include) DEFINE
                    -(FOSC_221184) DEBUG OBJECTEXTEND PRINT(.\Listings\Pwm.lst) TABS(2) OBJECT(.\Objects\Pwm.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2015 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Nuvoton Technoledge Corp.
   9          //  Website: http://www.nuvoton.com
  10          //  E-Mail : MicroC-8bit@nuvoton.com
  11          //  Date   : Apr/21/2015
  12          //********************************************************************************************************
             -***
  13          
  14          //********************************************************************************************************
             -***
  15          //  File Function: N76E885 PWM Output demo code
  16          //********************************************************************************************************
             -***
  17          
  18          #include <stdio.h>
  19          #include "Common.h"
  20          
  21          /*
  22          //-------- <<< Use Configuration Wizard in Context Menu >>> ------------
  23          //
  24          //<e0> System Clock Source Configuration
  25          //      <o1> System Clock Source Selection
  26          //          <0=> 2~25MHz    XTAL
  27          //          <1=> 32.768KHz  XTAL
  28          //          <2=> 22.1184MHz Internal
  29          //          <3=> 10KHz      Internal
  30          //          <4=> OSC-In     External
  31          //</e>
  32          //
  33          //<e2> Clock Divider Configuration
  34          //      <o3.0..7>  System Clock Source Devider <1-255>
  35          //          <i> Fsys = (System Clock Source) / (2 * Devider)
  36          //</e>
  37          //
  38          //<h> PWM Option
  39          //     <o4.0..2> PWM Pin Selection
  40          //          <0=> PWM0 (P10) <1=> PWM1 (P11) <2=> PWM2 (P02) <3=> PWM3 (P03)
  41          //          <4=> PWM4 (P05) <5=> PWM5 (P06) <6=> All        <7=> None
  42          //
  43          //      <o18.0..0> PWM Clock Source Selection
  44          //          <0=>  Fpwm = Fsys          <1=>  Fpwm = Timer1 overflow
  45          //      <o20.0..15>  Timer1 Counter Value <0x0000-0xFFFF>
C51 COMPILER V9.54   PWM                                                                   10/15/2016 23:15:47 PAGE 2   

  46          //
  47          //      <o5.0..2> PWM Divider Selection
  48          //          <0=> Fpwm/1  <1=> Fpwm/2   <2=> Fpwm/4   <3=> Fpwm/8
  49          //          <4=> Fpwm/16 <5=> Fpwm/32  <6=> Fpwm/64  <7=> Fpwm/128
  50          //
  51          //      <o6.0..0> PWM Type Selection
  52          //          <0=>  Edge-aligned         <1=>  Center-aligned
  53          //
  54          //      <o16.0..0> PWM Polarity Selection
  55          //          <0=>  Directly output      <1=>  Inversely output
  56          //
  57          //      <o7.0..1> PWM Mode Selection
  58          //          <0=>  Independent
  59          //          <1=>  Complementary
  60          //          <2=>  Synchronized
  61          //
  62          //      <e8>  PWM Dead-time Enable in Independent Mode
  63          //          <o9.0..1> PWM pair dead-time insertion Selection
  64          //              <0=>  PWM0/1 pair dead-time insertion enable
  65          //              <1=>  PWM2/3 pair dead-time insertion enable
  66          //              <2=>  PWM4/5 pair dead-time insertion enable
  67          //              <3=>  All PWM
  68          //          <o10.0..8>  PWM Dead-time Counter  <0-511>
  69          //              <i> PWM dead-time = (PDTCNT + 1) / Fsys
  70          //      </e>
  71          //
  72          //      <e17>  PWM Mask Enable
  73          //          <o11.0..2> PWM Mask Pin Selection
  74          //              <0=> PWM0 (P10) <1=> PWM1 (P11) <2=> PWM2 (P02) <3=> PWM3 (P03)
  75          //              <4=> PWM4 (P05) <5=> PWM5 (P06) <6=> All        <7=> None
  76          //          <o12.0..0> PWM Mask Data
  77          //              <0=>  Masked by 0   <1=>  Masked by 1
  78          //      </e>
  79          //
  80          //      <e13>  PWM Brake Enable
  81          //          <o25.0..2> PWM Pin Selection
  82          //              <0=> PWM0 (P10) <1=> PWM1 (P11) <2=> PWM2 (P02) <3=> PWM3 (P03)
  83          //              <4=> PWM4 (P05) <5=> PWM5 (P06) <6=> All
  84          //          <o14.0..0> PWM Brake pin input level selection
  85          //              <0=> P2.3 Falling edge  <1=>  P2.3 Rising edge
  86          //          <o15.0..0> PWM Brake Data
  87          //              <0=> 0          <1=> 1
  88          //          <e24>  PWM Brake Interrupt Enable
  89          //          </e>
  90          //      </e>
  91          //
  92          //      <e19>  PWM Group Enable
  93          //      </e>
  94          //
  95          //      <e23>  PWM Interrupt Enable
  96          //          <o21.0..1> PWM Interrupt Type Selection
  97          //              <0=>  Falling edge on PWM0/2/4 pin
  98          //              <1=>  Rising edge on PWM0/2/4 pin
  99          //              <2=>  Central point of a PWM period
 100          //              <3=>  End point of a PWM period
 101          //
 102          //          <o22.0..1> PWM Interrupt Pair Selection
 103          //              <0=>  PWM0
 104          //              <1=>  PWM2
 105          //              <2=>  PWM4
 106          //              <3=>  PWM4
 107          //      </e>
C51 COMPILER V9.54   PWM                                                                   10/15/2016 23:15:47 PAGE 3   

 108          //
 109          //</h>
 110          //
 111          //-------- <<< end of configuration section >>> ------------------------------
 112          */
 113          
 114          /******************************************************************************
 115           * FUNCTION_PURPOSE: PWM Brake Enable
 116           ******************************************************************************/
 117          void PWM_Brake_Enable (UINT8 Enable)
 118          {
 119   1          if(Enable)
 120   1          {
 121   2              set_FBINEN;
 122   2          }
 123   1          else
 124   1          {
 125   2              clr_FBINEN;
 126   2          }
 127   1      }
 128          
 129          /******************************************************************************
 130           * FUNCTION_PURPOSE: PWM Brake EDGE mode
 131           ******************************************************************************/
 132          void PWM_Brake_Edge_Mode (E_PWM_EDGE_MODE EdgeMode)
 133          {
 134   1          if(EdgeMode == E_RISING_EDGE)
 135   1          {
 136   2              set_FBINLS;
 137   2          }
 138   1          else
 139   1          {
 140   2              clr_FBINLS;
 141   2          }
 142   1      }
 143          
 144          /******************************************************************************
 145           * FUNCTION_PURPOSE: PWM Brake Pin enable
 146           ******************************************************************************/
 147          void PWM_Brake_Pin_Enable (E_PWM_BRAKE_PIN_SEL PwmBrakePinSel)
 148          {
 149   1          switch(PwmBrakePinSel)
 150   1          {
 151   2              case PWM_BRAKE_PIN_0:
 152   2                  set_FBD0;
 153   2                  break;
 154   2      
 155   2              case PWM_BRAKE_PIN_1:
 156   2                  set_FBD1;
 157   2                  break;
 158   2      
 159   2              case PWM_BRAKE_PIN_2:
 160   2                  set_FBD2;
 161   2                  break;
 162   2      
 163   2              case PWM_BRAKE_PIN_3:
 164   2                  set_FBD3;
 165   2                  break;
 166   2      
 167   2              case PWM_BRAKE_PIN_4:
 168   2                  set_FBD4;
 169   2                  break;
C51 COMPILER V9.54   PWM                                                                   10/15/2016 23:15:47 PAGE 4   

 170   2      
 171   2              case PWM_BRAKE_PIN_5:
 172   2                  set_FBD5;
 173   2                  break;
 174   2      
 175   2              default:
 176   2                  break;
 177   2          }
 178   1      }
 179          
 180          /******************************************************************************
 181           * FUNCTION_PURPOSE: PWM Brake Pin enable
 182           ******************************************************************************/
 183          void PWM_Brake_Pin_Disable (E_PWM_BRAKE_PIN_SEL PwmBrakePinSel)
 184          {
 185   1          switch(PwmBrakePinSel)
 186   1          {
 187   2              case PWM_BRAKE_PIN_0:
 188   2                  clr_FBD0;
 189   2                  break;
 190   2      
 191   2              case PWM_BRAKE_PIN_1:
 192   2                  clr_FBD1;
 193   2                  break;
 194   2      
 195   2              case PWM_BRAKE_PIN_2:
 196   2                  clr_FBD2;
 197   2                  break;
 198   2      
 199   2              case PWM_BRAKE_PIN_3:
 200   2                  clr_FBD3;
 201   2                  break;
 202   2      
 203   2              case PWM_BRAKE_PIN_4:
 204   2                  clr_FBD4;
 205   2                  break;
 206   2      
 207   2              case PWM_BRAKE_PIN_5:
 208   2                  clr_FBD5;
 209   2                  break;
 210   2      
 211   2              default:
 212   2                  break;
 213   2          }
 214   1      }
 215          
 216          /******************************************************************************
 217           * FUNCTION_PURPOSE: PWM Brake Control
 218           ******************************************************************************/
 219          void PWM_Brake_Control (UINT8 Enable,
 220                                  E_PWM_EDGE_MODE EdgeMode,
 221                                  E_PWM_BRAKE_PIN_SEL PwmBrakePinSel)
 222          {
 223   1          PWM_Brake_Enable(Enable);
 224   1          PWM_Brake_Edge_Mode(EdgeMode);
 225   1      
 226   1          if(Enable)
 227   1          {
 228   2              PWM_Brake_Pin_Enable(PwmBrakePinSel);
 229   2          }
 230   1          else
 231   1          {
C51 COMPILER V9.54   PWM                                                                   10/15/2016 23:15:47 PAGE 5   

 232   2              PWM_Brake_Pin_Disable(PwmBrakePinSel);
 233   2          }
 234   1      }
 235          /******************************************************************************
 236           * FUNCTION_PURPOSE: PWM Interrupt Pair Selection
 237           ******************************************************************************/
 238          void PWM_Interrupt_Pair_Sel (E_PWM_INT_PAIR PwmPinSel)
 239          {
 240   1          switch(PwmPinSel)
 241   1          {
 242   2              case PWM_INT_PAIR_0:
 243   2              {
 244   3                  clr_INTSEL1;
 245   3                  clr_INTSEL0;
 246   3              }
 247   2              break;
 248   2      
 249   2              case PWM_INT_PAIR_1:
 250   2              {
 251   3                  clr_INTSEL1;
 252   3                  set_INTSEL0;
 253   3              }
 254   2              break;
 255   2      
 256   2              case PWM_INT_PAIR_2:
 257   2              {
 258   3                  set_INTSEL1;
 259   3                  clr_INTSEL0;
 260   3              }
 261   2              break;
 262   2      
 263   2              case PWM_INT_PAIR_3:
 264   2              {
 265   3                  set_INTSEL1;
 266   3                  set_INTSEL0;
 267   3              }
 268   2              break;
 269   2      
 270   2              default:
 271   2                  break;
 272   2          }
 273   1      }
 274          /******************************************************************************
 275           * FUNCTION_PURPOSE: PWM Interrupt Type Selection
 276           ******************************************************************************/
 277          void PWM_Interrupt_Type_Sel (E_PWM_INT_TYPE PwmPinType)
 278          {
 279   1          switch(PwmPinType)
 280   1          {
 281   2              case PWM_INT_TYPE_0:
 282   2              {
 283   3                  clr_INTTYP1;
 284   3                  clr_INTTYP0;
 285   3              }
 286   2              break;
 287   2      
 288   2              case PWM_INT_TYPE_1:
 289   2              {
 290   3                  clr_INTTYP1;
 291   3                  set_INTTYP0;
 292   3              }
 293   2              break;
C51 COMPILER V9.54   PWM                                                                   10/15/2016 23:15:47 PAGE 6   

 294   2      
 295   2              case PWM_INT_TYPE_2:
 296   2              {
 297   3                  set_INTTYP1;
 298   3                  clr_INTTYP0;
 299   3              }
 300   2              break;
 301   2      
 302   2              case PWM_INT_TYPE_3:
 303   2              {
 304   3                  set_INTTYP1;
 305   3                  set_INTTYP0;
 306   3              }
 307   2              break;
 308   2      
 309   2              default:
 310   2                  break;
 311   2          }
 312   1      }
 313          /******************************************************************************
 314           * FUNCTION_PURPOSE: PWM Mask Pin Selection
 315           ******************************************************************************/
 316          void PWM_Mask_Pin_Sel (E_PWM_MASK_PIN_SEL PwmMaskPin, UINT8 DataEnable)
 317          {
 318   1          switch(PwmMaskPin)
 319   1          {
 320   2              case PWM_MASK_PIN_0:
 321   2              {
 322   3                  set_PMEN0;
 323   3                  if(DataEnable == 1)
 324   3                  {
 325   4                      set_PMD0;
 326   4                  }
 327   3                  else
 328   3                  {
 329   4                      clr_PMD0;
 330   4                  }
 331   3              }
 332   2              break;
 333   2      
 334   2              case PWM_MASK_PIN_1:
 335   2              {
 336   3                  set_PMEN1;
 337   3                  if(DataEnable == 1)
 338   3                  {
 339   4                      set_PMD1;
 340   4                  }
 341   3                  else
 342   3                  {
 343   4                      clr_PMD1;
 344   4                  }
 345   3              }
 346   2              break;
 347   2      
 348   2              case PWM_MASK_PIN_2:
 349   2              {
 350   3                  set_PMEN2;
 351   3                  if(DataEnable == 1)
 352   3                  {
 353   4                      set_PMD2;
 354   4                  }
 355   3                  else
C51 COMPILER V9.54   PWM                                                                   10/15/2016 23:15:47 PAGE 7   

 356   3                  {
 357   4                      clr_PMD2;
 358   4                  }
 359   3              }
 360   2              break;
 361   2      
 362   2              case PWM_MASK_PIN_3:
 363   2              {
 364   3                  set_PMEN3;
 365   3                  if(DataEnable == 1)
 366   3                  {
 367   4                      set_PMD3;
 368   4                  }
 369   3                  else
 370   3                  {
 371   4                      clr_PMD3;
 372   4                  }
 373   3              }
 374   2              break;
 375   2      
 376   2              case PWM_MASK_PIN_4:
 377   2              {
 378   3                  set_PMEN4;
 379   3                  if(DataEnable == 1)
 380   3                  {
 381   4                      set_PMD4;
 382   4                  }
 383   3                  else
 384   3                  {
 385   4                      clr_PMD4;
 386   4                  }
 387   3              }
 388   2              break;
 389   2      
 390   2              case PWM_MASK_PIN_5:
 391   2              {
 392   3                  set_PMEN5;
 393   3                  if(DataEnable == 1)
 394   3                  {
 395   4                      set_PMD5;
 396   4                  }
 397   3                  else
 398   3                  {
 399   4                      clr_PMD5;
 400   4                  }
 401   3              }
 402   2              break;
 403   2      
 404   2              case PWM_MASK_PIN_6:
 405   2              {
 406   3                  set_PMEN6;
 407   3                  if(DataEnable == 1)
 408   3                  {
 409   4                      set_PMD6;
 410   4                  }
 411   3                  else
 412   3                  {
 413   4                      clr_PMD6;
 414   4                  }
 415   3              }
 416   2              break;
 417   2      
C51 COMPILER V9.54   PWM                                                                   10/15/2016 23:15:47 PAGE 8   

 418   2              case PWM_MASK_PIN_7:
 419   2              {
 420   3                  set_PMEN7;
 421   3                  if(DataEnable == 1)
 422   3                  {
 423   4                      set_PMD7;
 424   4                  }
 425   3                  else
 426   3                  {
 427   4                      clr_PMD7;
 428   4                  }
 429   3              }
 430   2              break;
 431   2      
 432   2              default:
 433   2                  break;
 434   2          }
 435   1      }
 436          /******************************************************************************
 437           * FUNCTION_PURPOSE: PWM Dead Time
 438           ******************************************************************************/
 439          void PWM_Dead_Time_Control (UINT8 PwmPairPinSel)
 440          {
 441   1          UINT8 u8Tmp;
 442   1      
 443   1          if(PwmPairPinSel == 0)
 444   1          {
 445   2              set_PDT01EN;
 446   2          }
 447   1          else if(PwmPairPinSel == 1)
 448   1          {
 449   2              set_PDT23EN;
 450   2          }
 451   1          else
 452   1          {
 453   2              set_PDT45EN;
 454   2          }
 455   1      
 456   1          TA = 0xAA;
 457   1          TA = 0x55;
 458   1          PDTEN |= 0x07;
 459   1          TA = 0xAA;
 460   1          TA = 0x55;
 461   1          PDTCNT = LOBYTE(PWM_PDCNT_VAL);
 462   1          u8Tmp =  HIBYTE(PWM_PDCNT_VAL);
 463   1      
 464   1          if(u8Tmp == 0)
 465   1          {
 466   2              TA = 0xAA;
 467   2              TA = 0x55;
 468   2              PDTEN &= CLR_BIT4;
 469   2          }
 470   1          else
 471   1          {
 472   2              TA = 0xAA;
 473   2              TA = 0x55;
 474   2              PDTEN |= SET_BIT4;
 475   2          }
 476   1      }
 477          /******************************************************************************
 478           * FUNCTION_PURPOSE: PWM Type Select
 479           ******************************************************************************/
C51 COMPILER V9.54   PWM                                                                   10/15/2016 23:15:47 PAGE 9   

 480          void PWM_Mode_Select (E_PWM_MODE mode)
 481          {
 482   1          switch(mode)
 483   1          {
 484   2              case PWM_MODE_0:                //Independent Mode
 485   2              {
 486   3                  clr_PWMMOD1;
 487   3                  clr_PWMMOD0;
 488   3              }
 489   2              break;
 490   2      
 491   2              case PWM_MODE_1:                //Complementary Mode
 492   2              {
 493   3                  clr_PWMMOD1;
 494   3                  set_PWMMOD0;
 495   3              }
 496   2              break;
 497   2      
 498   2              case PWM_MODE_2:                //Synchronized Mode
 499   2              {
 500   3                  set_PWMMOD1;
 501   3                  clr_PWMMOD0;
 502   3              }
 503   2              break;
 504   2      
 505   2              case PWM_MODE_3:                //Independent Mode
 506   2              {
 507   3                  clr_PWMMOD1;
 508   3                  clr_PWMMOD0;
 509   3              }
 510   2              break;
 511   2      
 512   2              default:
 513   2                  break;
 514   2          }
 515   1      }
 516          /******************************************************************************
 517           * FUNCTION_PURPOSE: PWM Polarity Select
 518           ******************************************************************************/
 519          void PWM_Polarity_Select (E_PWM_PIN PwmPinSel, UINT8 PwmPol)
 520          {
 521   1          switch(PwmPinSel)
 522   1          {
 523   2              case PWM_PIN_0:
 524   2              {
 525   3                  if(PwmPol)
 526   3                  {
 527   4                      clr_PNP0;            //directly
 528   4                  }
 529   3                  else
 530   3                  {
 531   4                      set_PNP0;            //inversely
 532   4                  }
 533   3              }
 534   2              break;
 535   2      
 536   2              case PWM_PIN_1:
 537   2              {
 538   3                  if(PwmPol)
 539   3                  {
 540   4                      clr_PNP1;            //directly
 541   4                  }
C51 COMPILER V9.54   PWM                                                                   10/15/2016 23:15:47 PAGE 10  

 542   3                  else
 543   3                  {
 544   4                      set_PNP1;            //inversely
 545   4                  }
 546   3              }
 547   2              break;
 548   2      
 549   2              case PWM_PIN_2:
 550   2              {
 551   3                  if(PwmPol)
 552   3                  {
 553   4                      clr_PNP2;            //directly
 554   4                  }
 555   3                  else
 556   3                  {
 557   4                      set_PNP2;            //inversely
 558   4                  }
 559   3              }
 560   2              break;
 561   2      
 562   2              case PWM_PIN_3:
 563   2              {
 564   3                  if(PwmPol)
 565   3                  {
 566   4                      clr_PNP3;            //directly
 567   4                  }
 568   3                  else
 569   3                  {
 570   4                      set_PNP3;            //inversely
 571   4                  }
 572   3              }
 573   2              break;
 574   2      
 575   2              case PWM_PIN_4:
 576   2              {
 577   3                  if(PwmPol)
 578   3                  {
 579   4                      clr_PNP4;            //directly
 580   4                  }
 581   3                  else
 582   3                  {
 583   4                      set_PNP4;            //inversely
 584   4                  }
 585   3              }
 586   2              break;
 587   2      
 588   2              case PWM_PIN_5:
 589   2              {
 590   3                  if(PwmPol)
 591   3                  {
 592   4                      clr_PNP5;            //directly
 593   4                  }
 594   3                  else
 595   3                  {
 596   4                      set_PNP5;            //inversely
 597   4                  }
 598   3              }
 599   2              break;
 600   2      
 601   2              case PWM_PIN_6:
 602   2              {
 603   3                  if(PwmPol)
C51 COMPILER V9.54   PWM                                                                   10/15/2016 23:15:47 PAGE 11  

 604   3                  {
 605   4                      clr_PNP6;            //directly
 606   4                  }
 607   3                  else
 608   3                  {
 609   4                      set_PNP6;            //inversely
 610   4                  }
 611   3              }
 612   2              break;
 613   2      
 614   2              case PWM_PIN_7:
 615   2              {
 616   3                  if(PwmPol)
 617   3                  {
 618   4                      clr_PNP7;            //directly
 619   4                  }
 620   3                  else
 621   3                  {
 622   4                      set_PNP7;            //inversely
 623   4                  }
 624   3              }
 625   2              break;
 626   2      
 627   2              default:
 628   2                  break;
 629   2          }
 630   1      }
 631          
 632          //------------------------------------------------------------------------------
 633          void Trigger_Timer1(void)
 634          {
 635   1          clr_T1M;                                //T1M=0, Timer1 Clock = Fsys/12
 636   1          TMOD |= 0x10;                           //Timer1 is 16-bit mode
 637   1          TL1 = LOBYTE(TM1_VALUE);
 638   1          TH1 = HIBYTE(TM1_VALUE);
 639   1          set_TR1;
 640   1      }
 641          /******************************************************************************
 642           * FUNCTION_PURPOSE: PWM Clock Source Select
 643           ******************************************************************************/
 644          void PWM_Clock_Select (UINT8 PwmClkSel)
 645          {
 646   1          if(PwmClkSel)
 647   1          {
 648   2              set_PWMCKS;
 649   2              Trigger_Timer1();
 650   2          }
 651   1          else
 652   1          {
 653   2              clr_PWMCKS;
 654   2          }
 655   1      }
 656          /******************************************************************************
 657           * FUNCTION_PURPOSE: PWM Type Select
 658           ******************************************************************************/
 659          void PWM_Type_Select (UINT8 PwmTyp)
 660          {
 661   1          if(PwmTyp == 0)                      //Edge-aligned
 662   1          {
 663   2              clr_PWMTYP;
 664   2          }
 665   1          else
C51 COMPILER V9.54   PWM                                                                   10/15/2016 23:15:47 PAGE 12  

 666   1          {
 667   2              set_PWMTYP;        //Center-aligned
 668   2          }
 669   1      }
 670          /******************************************************************************
 671           * FUNCTION_PURPOSE: PWM Group Mode Enable/Disable
 672           ******************************************************************************/
 673          void PWM_Group_Mode (UINT8 PwmGrp)
 674          {
 675   1          if(PwmGrp == 0)
 676   1          {
 677   2              clr_GP;
 678   2          }
 679   1          else
 680   1          {
 681   2              set_GP;
 682   2          }
 683   1      }
 684          /******************************************************************************
 685           * FUNCTION_PURPOSE: PWM Pin Select
 686           ******************************************************************************/
 687          void PWM_Pin_Select (E_PWM_PIN PwmPinSel)
 688          {
 689   1          switch(PwmPinSel)
 690   1          {
 691   2              case PWM_PIN_0:
 692   2                  set_PIO0;                //P1.0 = PWM0
 693   2                  break;
 694   2      
 695   2              case PWM_PIN_1:
 696   2                  set_PIO1;                //P1.1 = PWM1
 697   2                  break;
 698   2      
 699   2              case PWM_PIN_2:
 700   2                  set_PIO2;                //P0.2 = PWM2
 701   2                  break;
 702   2      
 703   2              case PWM_PIN_3:
 704   2                  set_PIO3;                //P0.3 = PWM3
 705   2                  break;
 706   2      
 707   2              case PWM_PIN_4:
 708   2                  set_PIO4;                //P0.5 = PWM4
 709   2                  break;
 710   2      
 711   2              case PWM_PIN_5:
 712   2                  set_PIO5;                //P0.6 = PWM5
 713   2                  break;
 714   2      
 715   2              case PWM_PIN_6:
 716   2                  set_PIO6;
 717   2                  break;
 718   2      
 719   2              case PWM_PIN_7:
 720   2                  set_PIO7;
 721   2                  break;
 722   2      
 723   2              default:
 724   2                  PIO &= ~0x3F;               //None, all PWM pin are GPIO mode
 725   2                  break;
 726   2          }
 727   1      }
C51 COMPILER V9.54   PWM                                                                   10/15/2016 23:15:47 PAGE 13  

 728          /******************************************************************************
 729           * FUNCTION_PURPOSE: PWM Interrupt Enable
 730           ******************************************************************************/
 731          void PWM_Interrupt_Enable (UINT8 Enable)
 732          {
 733   1          if(Enable == 1)
 734   1          {
 735   2              set_EPWM;
 736   2              set_EA;
 737   2          }
 738   1          else
 739   1          {
 740   2              clr_EPWM;
 741   2              clr_EA;
 742   2          }
 743   1      }
 744          /******************************************************************************
 745           * FUNCTION_PURPOSE: PWM Brake Interrupt Enable
 746           ******************************************************************************/
 747          void PWM_Brake_Interrupt_Enable (UINT8 Enable)
 748          {
 749   1          if(Enable == 1)
 750   1          {
 751   2              set_EFB;
 752   2              set_EA;
 753   2          }
 754   1          else
 755   1          {
 756   2              clr_EFB;
 757   2              clr_EA;
 758   2          }
 759   1      }
 760          /******************************************************************************
 761           * FUNCTION_PURPOSE: PWM Clock Divider Select
 762           ******************************************************************************/
 763          void PWM_DIV_Select (E_PWM_CLK_DIV_SEL PwmDivSel)
 764          {
 765   1          switch(PwmDivSel)
 766   1          {
 767   2              case PWM_DIV_SEL_0:
 768   2              {
 769   3                  clr_PWMDIV2;
 770   3                  clr_PWMDIV1;
 771   3                  clr_PWMDIV0;
 772   3              }
 773   2              break;
 774   2      
 775   2              case PWM_DIV_SEL_1:
 776   2              {
 777   3                  clr_PWMDIV2;
 778   3                  clr_PWMDIV1;
 779   3                  set_PWMDIV0;
 780   3              }
 781   2              break;
 782   2      
 783   2              case PWM_DIV_SEL_2:
 784   2              {
 785   3                  clr_PWMDIV2;
 786   3                  set_PWMDIV1;
 787   3                  clr_PWMDIV0;
 788   3              }
 789   2              break;
C51 COMPILER V9.54   PWM                                                                   10/15/2016 23:15:47 PAGE 14  

 790   2      
 791   2              case PWM_DIV_SEL_3:
 792   2              {
 793   3                  clr_PWMDIV2;
 794   3                  set_PWMDIV1;
 795   3                  set_PWMDIV0;
 796   3              }
 797   2              break;
 798   2      
 799   2              case PWM_DIV_SEL_4:
 800   2              {
 801   3                  set_PWMDIV2;
 802   3                  clr_PWMDIV1;
 803   3                  clr_PWMDIV0;
 804   3              }
 805   2              break;
 806   2      
 807   2              case PWM_DIV_SEL_5:
 808   2              {
 809   3                  set_PWMDIV2;
 810   3                  clr_PWMDIV1;
 811   3                  set_PWMDIV0;
 812   3              }
 813   2              break;
 814   2      
 815   2              case PWM_DIV_SEL_6:
 816   2              {
 817   3                  set_PWMDIV2;
 818   3                  set_PWMDIV1; 
 819   3                  clr_PWMDIV0;
 820   3              }
 821   2              break;
 822   2      
 823   2              case PWM_DIV_SEL_7:
 824   2              {
 825   3                  set_PWMDIV2;
 826   3                  set_PWMDIV1;
 827   3                  set_PWMDIV0;
 828   3              }
 829   2              break;
 830   2          }
 831   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    861    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
